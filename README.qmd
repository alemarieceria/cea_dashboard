---
title: "Coastal Ecosystem Accounting (Hawaii) Dashboard"
format: 
    gfm:
        toc: true
execute:
  eval: false
  echo: fenced
  warning: false
  message: false
---

**A reproducible spatial data dashboard built with the [Rhino Shiny framework](https://appsilon.github.io/rhino/), [`{targets}`](https://books.ropensci.org/targets/) for automated ETL, and [`{bs4Dash}`](https://bs4dash.rinterface.com/) for an interactive UI.**

## Project Overview

The CEA Dashboard helps turn raw spatial data into clear, interactive insights using reproducible R workflows. It brings together automated data processing, organized project structure, and a modular Shiny dashboard that makes it easier to explore and share results. This project shows how I build reproducible data-to-dashboard workflows in R.

## Project Structure

```text
cea_dashboard/
├── .github/ # GitHub configuration (actions, workflows, etc.)
│
├── app/ # Rhino Shiny application structure
│ ├── js/ # Custom JavaScript files
│ ├── logic/ # Server-side logic scripts
│ ├── static/ # Images or static assets
│ ├── styles/ # Custom CSS and styling
│ ├── view/ # UI layout and component files
│ └── main.R # Main app entry point (calls Rhino's app structure)
│
├── data/
│ └── fisheries/ # Data used for the Fisheries page
│ │ ├── processed/ # Output from `{targets}` (cleaned datasets)
│ │ └── raw/ # Input data (excluded from Git; not shared)
|
├── R/ # Custom R functions and modular ETL pipelines
│ └── fisheries/
│ ├── functions/ # Helper functions used in the Fisheries ETL
│ │ ├── export_fisheries_data.R # Exports processed data
│ │ ├── load_fisheries_data.R # Loads raw input data
│ │ └── process_fisheries_data.R # Cleans and transforms data
│ └── fisheries_targets.R # Defines modular `{targets}` pipeline for Fisheries ETL
│
├── renv/ # Local R environment managed by `{renv}`
│
├── tests/ # (Optional) Automated tests for reproducibility
│
├── _targets.R # Main `{targets}` pipeline configuration (imports all modular ETLs)
│
├── .gitignore # Specifies files/folders excluded from version control
├── .lintr # Linting configuration for code style
├── .Renviron # Environment variables
├── .Rprofile # R session startup settings
│
├── app.R # Rhino launcher script (calls `rhino::app()`)
│
├── cea_dashboard.Rproj # RStudio/Posit project file
├── config.yml # Rhino configuration for environment and app options
├── dependencies.R # Script to install key project dependencies
│
├── README.qmd # Quarto README (rendered documentation)
├── README.md # Rendered Markdown version for GitHub
│
├── renv.lock # Snapshot of R package versions for reproducibility
└── rhino.yml # Rhino project configuration (defines app entry and structure)
```

## Installation and Setup

Clone this repository:

```{bash}
git clone https://github.com/<your-username>/cea_dashboard.git
cd cea_dashboard
```

Open the project in desired ID (I use Positron), then run to recreate the exact R package environment recorded in `renv.lock`:

```{r}
install.packages("renv")
renv::restore()
```

## Required Dependencies

Core packages used in this project:

| Category      | Packages                             |
| ------------- | ------------------------------------ |
| Framework     | `rhino`, `bs4Dash`, `shiny`          |
| Automation    | `targets`, `tarchetypes`             |
| Spatial Data  | `sf`, `terra`, `dplyr`, `janitor`    |
| Visualization | `ggplot2`, `plotly`, `leaflet`, `DT` |
| Utilities     | `renv`, `purrr`, `here`, `readr`     |

## Reproducible Workflow

Run the automated ETL pipeline using `{targets}`:

```{r}
# Execute ETL pipeline
targets::tar_make()  

# Visualize pipeline dependencies     
targets::tar_visnetwork()    
```

All processed outputs will be saved in the `data/processed/` subfolder. The pipeline ensures that only modified steps are re-run, improving efficiency and reproducibility.

## Running the Shiny App

After processing the data, launch the dashboard locally:

```{r}
rhino::run_app()
```

This will star the Shiny server and open the app in your IDE or browser. Ensure the processed data files exist before launching.

## Deployment

Once ready to share publicly, you can deploy your dashboard using the following options:

1. [shinyapps.io](https://www.shinyapps.io/)

Install the deployment package:

```{r}
pacman::p_load("rsconnect")
```

Ensure you've signed up for an account, then authenticate it:

```{r}
rsconnect::setAccountInfo(name = "<your-name>", token = "<token>", secret = "<secret>"
```

Deploy Shiny dashboard:

```{r}
rsconnect::deployApp()
```

Your dashboard will be hosted at: `https://<your-username>.shinyapps.io/cea_dashboard`

2. [Hugging Face Spaces](https://huggingface.co/spaces)

Instructions on how to publish the rhino app on hugging face can 
be found [here](https://appsilon.github.io/rhino/articles/how-to/publish-on-huggingface.html).

## Data Sources

| Dataset                     | Description                        | Source                                                       |
| --------------------------- | ---------------------------------- | ------------------------------------------------------------ |

## Reproducibility Notes

* Developed on **Windows 11 Home (Build 26100)** using **R 4.5.0** in **Positron**
* Environment managed with `{renv}`
* Automated ETL via `{targets}`
* Modular `{shiny}` app structure using `{rhino}`
* Version control via Git and GitHub
* Data directories excluded from commits (`.gitignore`)  

## Resources

* [Getting Started with {Rhino} to Build Enterprise-Grade Shiny Apps](https://www.youtube.com/watch?v=_Om68Yj5Sxc&list=PLNuj1Dnarqy6Ye2SuVtHiDiB1AHC0_HUu&index=18) by Appsilon
* [Intro to bs4dash: Improved R Shiny Dashboards](https://www.youtube.com/watch?v=LY6K_GD4ypc&list=PLNuj1Dnarqy6Ye2SuVtHiDiB1AHC0_HUu&index=25&t=362s) by Ash | Dashboards & Data Visualisation

## Author

Alemarie Ceria  
Oleson Ecological Economics Lab, University of Hawaiʻi at Mānoa  
🗂️ [Portfolio](https://alemarieceria.github.io/portfolio/)  